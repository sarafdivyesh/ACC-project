git tutorial - javatpoint ? scroll to top home java git compiler software testing coa html css selenium servlet jsp jquery quiz projects interview q comment forum training git tutorial git tutorial what is github git vs github git vs svn git vs mercurial version control system getting started install git on windows install git on linux install git on mac git environment setup git tools git terminology git commands git flow cheat sheet git cheat sheet staging & commits git init git add git commit git clone git stash git ignore git fork git repository git index git head git origin master git remote git tags upstream & downstream undoing changes git checkout git revert git reset git rm git cherry-pick inspecting changes git log git diff git status branching & merging git branch merge & merge conflict git rebase git squash collaborating git fetch git pull git push interview questions git interview next ? git tutorial git tutorial provides basic and advanced concepts of git and github. our git tutorial is designed for beginners and professionals. git is a modern and widely used distributed version control system in the world. it is developed to manage projects with high speed and efficiency. the version control system allows us to monitor and work together with our team members at the same workspace. this tutorial will help you to understand the distributed version control system git via the command line as well as with github. the examples in this tutorial are performed on windows, but we can also perform same operations on other operating systems like linux (ubuntu) and macos. what is git? git is an open-source distributed version control system. it is designed to handle minor to major projects with high speed and efficiency. it is developed to co-ordinate the work among the developers. the version control allows us to track and work together with our team members at the same workspace. git is foundation of many services like github and gitlab, but we can use git without using any other git services. git can be used privately and publicly. git was created by linus torvalds in 2005 to develop linux kernel. it is also used as an important distributed version-control tool for the devops. git is easy to learn, and has fast performance. it is superior to other scm tools like subversion, cvs, perforce, and clearcase. features of git some remarkable features of git are as follows: open source git is an open-source tool. it is released under the gpl (general public license) license. scalable git is scalable, which means when the number of users increases, the git can easily handle such situations. distributed one of git's great features is that it is distributed. distributed means that instead of switching the project to another machine, we can create a "clone" of the entire repository. also, instead of just having one central repository that you send changes to, every user has their own repository that contains the entire commit history of the project. we do not need to connect to the remote repository; the change is just stored on our local repository. if necessary, we can push these changes to a remote repository. security git is secure. it uses the sha1 (secure hash function) to name and identify objects within its repository. files and commits are checked and retrieved by its checksum at the time of checkout. it stores its history in such a way that the id of particular commits depends upon the complete development history leading up to that commit. once it is published, one cannot make changes to its old version. speed git is very fast, so it can complete all the tasks in a while. most of the git operations are done on the local repository, so it provides a huge speed. also, a centralized version control system continually communicates with a server somewhere. performance tests conducted by mozilla showed that it was extremely fast compared to other vcss. fetching version history from a locally stored repository is much faster than fetching it from the remote server. the core part of git is written in c, which ignores runtime overheads associated with other high-level languages. git was developed to work on the linux kernel; therefore, it is capable enough to handle large repositories effectively. from the beginning, speed and performance have been git's primary goals. supports non-linear development git supports seamless branching and merging, which helps in visualizing and navigating a non-linear development. a branch in git represents a single commit. we can construct the full branch structure with the help of its parental commit. branching and merging branching and merging are the great features of git, which makes it different from the other scm tools. git allows the creation of multiple branches without affecting each other. we can perform tasks like creation, deletion, and merging on branches, and these tasks take a few seconds only. below are some features that can be achieved by branching: we can create a separate branch for a new module of the project, commit and delete it whenever we want. we can have a production branch, which always has what goes into production and can be merged for testing in the test branch. we can create a demo branch for the experiment and check if it is working. we can also remove it if needed. the core benefit of branching is if we want to push something to a remote repository, we do not have to push all of our branches. we can select a few of our branches, or all of them together. data assurance the git data model ensures the cryptographic integrity of every unit of our project. it provides a unique commit id to every commit through a sha algorithm. we can retrieve and update the commit by commit id. most of the centralized version control systems do not provide such integrity by default. staging area the staging area is also a unique functionality of git. it can be considered as a preview of our next commit, moreover, an intermediate area where commits can be formatted and reviewed before completion. when you make a commit, git takes changes that are in the staging area and make them as a new commit. we are allowed to add and remove changes from the staging area. the staging area can be considered as a place where git stores the changes. although, git doesn't have a dedicated staging directory where it can store some objects representing file changes (blobs). instead of this, it uses a file called index. another feature of git that makes it apart from other scm tools is that it is possible to quickly stage some of our files and commit them without committing other modified files in our working directory. maintain the clean history git facilitates with git rebase; it is one of the most helpful features of git. it fetches the latest commits from the master branch and puts our code on top of that. thus, it maintains a clean history of the project. benefits of git a version control application allows us to keep track of all the changes that we make in the files of our project. every time we make changes in files of an existing project, we can push those changes to a repository. other developers are allowed to pull your changes from the repository and continue to work with the updates that you added to the project files. some significant benefits of using git are as follows: saves time git is lightning fast technology. each command takes only a few seconds to execute so we can save a lot of time as compared to login to a github account and find out its features. offline working one of the most important benefits of git is that it supports offline working. if we are facing internet connectivity issues, it will not affect our work. in git, we can do almost everything locally. comparatively, other cvs like svn is limited and prefer the connection with the central repository. undo mistakes one additional benefit of git is we can undo mistakes. sometimes the undo can be a savior option for us. git provides the undo option for almost everything. track the changes git facilitates with some exciting features such as diff, log, and status, which allows us to track changes so we can check the status, compare our files or branches. why git? we have discussed many features and benefits of git that demonstrate the undoubtedly git as the leading version control system. now, we will discuss some other points about why should we choose git. git integrity git is developed to ensure the security and integrity of content being version controlled. it uses checksum during transit or tampering with the file system to confirm that information is not lost. internally it creates a checksum value from the contents of the file and then verifies it when transmitting or storing data. trendy version control system git is the most widely used version control system. it has maximum projects among all the version control systems. due to its amazing workflow and features, it is a preferred choice of developers. everything is local almost all operations of git can be performed locally; this is a significant reason for the use of git. we will not have to ensure internet connectivity. collaborate to public projects there are many public projects available on the github. we can collaborate on those projects and show our creativity to the world. many developers are collaborating on public projects. the collaboration allows us to stand with experienced developers and learn a lot from them; thus, it takes our programming skills to the next level. impress recruiters we can impress recruiters by mentioning the git and github on our resume. send your github profile link to the hr of the organization you want to join. show your skills and influence them through your work. it increases the chances of getting hired. prerequisites git is not a programming language, so you should have the basic understanding of windows commands only. audience we have developed this git tutorial for beginners and professionals both because we have started this tutorial from scratch. so it will help you to learn git quickly. problems we assure you that you will not find any difficulty in our git tutorial. but, if you find any mistake, you can post it in our comment section. next topicwhat is git next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.