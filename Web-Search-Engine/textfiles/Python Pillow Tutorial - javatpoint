python pillow tutorial - javatpoint ? scroll to top home pillow python turtle openpyxl pygame java sql android cloud javascript servlet html struts2 spring quiz comment forum pillow tutorial python pillow tutorial python pillow tutorial as technology emerges day by day, digital images can be an indispensable source of receiving data. we encounter a lot of digital images in daily life. however, these pictures can be related to anything. in the programming world, we can process digital images using various libraries or tools. in this article, we will learn about one of the popular tools of python is pillow. however, python provides many other useful libraries such as opencv, python image library (pil), and scikit-image. this article completely focuses on the python pillow module (pil). before dive deep into this topic, let's understand image processing. what is image processing? image processing is a method of analyzing and manipulating digital images. the main goal is to extracting some information that can be used somewhere else. let's make it simple to understand with a real-life example. for example - nowadays, cctv cameras are instated in the traffic light that capture digital images, identify the vehicle's number plate, and check whether the vehicle violated the traffic rules or not. all this process is related to image processing. introduction python pillow module is built on top of pil (python image library). it is the essential modules for image processing in python. but it is not supported by python 3. but, we can use this module with the python 3.x versions as pil. it supports the variability of images such as jpeg, png, bmp, gif, ppm, and tiff. we can do anything on the digital images using the pillow module. in the upcoming section, we will learn various operations on the images such as filtering images, creating thumbnail, merging images, cropping images, blur an image, resizing an image, creating a water mark and many other operations. installation of pillow before start working with python, we need to install the pillow library to our local machine. we can do it by typing the following command in the terminal. 
pip install pillow
or 
pip install pil
 if pip is already installed in the system, it will simply show the "requirement already satisfied". using the image module python pillow library is used to image class within it to show the image. the image modules that belong to the pillow package have a few inbuilt functions such as load images or create new images, etc. opening, rotating and displaying an image opening an image is a basic operation of the image processing. we import the image module from the pil library to load the image. it provides the image.open() method, which takes an image filename as an argument. this method returns the image object. we can make any modification to image object which can be saved to an image with the save() method. once the image is open, we can perform operations as resize, crop, draw or many others. let's understand the following example. example - 
from pil import image
#open image using image module
im = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
#show actual image
im.show()
#show rotated image
im = im.rotate(45)
im.show()
 output: image after rotation - explanation the above code displayed the original and rotated image using the standard jpeg display utility. if we run the above code in the jupyter notebook then the output will be shown in the local machine image gallery. attributes of image module the image class contains some attributes to manipulate the image object. let's understand these attributes using one by one. image.filemname the image.filename function returns the name of the image. 
image = image.open('beach1.jpg')
image.filename
 output: 'c:\\users\\devansh sharma\\downloads\\car.jpg'
 image.format this function is used to get file format of the image file such as 'jpeg', 'bmp', 'png', etc. 
image = image.open('beach1.jpg')
image.format
 output: 'jpeg'
 image.mode the above method returns the pixel format used by the image. typing variables are '1', 'l', 'rgb', or 'cmyk'. 
im = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
im.mode
 output: 'rgb'
 image.size the image.size function returns the tuple that contains height & weight of the image. 
im = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
im.size
 output: (480, 320)
 image.width this method returns the width of the image. 
im = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
im.width
 output: 480
 image.height this method returns the width of the image. 
im = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
im.width
 output: 320
 image.info this method returns a dictionary holding data associated with the image. 
im = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
im.info
 output: {'jfif': 257,
 'jfif_version': (1, 1),
 'jfif_unit': 0,
 'jfif_density': (1, 1),
 'progressive': 1,
 'progression': 1}
 working with images python pillow module makes very simple to work with the images. we can use pil.image modle function. let's see the syntax. syntax - 
image.open(fp, mode = 'r')
 in the above syntax - fp - it is a file object or represents the file name, path object. this file object can implement the read(), seek(), and tell() methods. mode - it represents a file mode. it is an optional argument if given, by default is 'r'. consider the following example. example - in the following example, we will open an image in .jpg format. first, we will display the image and then save it with another file format. 
from pil import image
#we are opening image using image module
img = image.open("images/cuba.jpg")
#it will display the actual image
imimg = img.rotate(45)
img.show()
 the above code will display the actual and rotate image at 45 degree. explanation - in the above code, we have imported the image module from pil library, called image.open() function to read an image. the image.open() function returns an image object. this method takes a filename(string), a path object or an image(file) object. saving an image the image module provides the save() method to save the image to file. it takes a filename, a file object that has been opened to write. let's understand the following syntax. syntax &ndash 
image.save(fp, format = none, **params)
 in the above syntax - fp - it represents a filename (string), path object or file object. format - it is an optional format override. it is used when a file object was used in its place of a filename. options - it is an additional parameter to the image writer. return value - the return value is keyerror - it is used when the output format could not be determined from the file name. ioerror - it is used when the file may have been formed and may have fractional data. if we sum up the above syntax, the file saves based on the given filename. if we don't specify the format, it is based on the current filename extension. 
image.save('dev.png')
 in the above example, it keeps the file based on the file extension the image type. for example - the code will save as a png file in our current working directory. we can also obviously identify the file type as a second parameter. let's see the following line. 
image.save('dev.gif', 'gif') 
 creating thumbnails thumbnail is images of equal height and width. sometimes, we need to create a thumbnail to specify the actual image. the pillow library provides thumbnail() function. this method transforms the actual image to contain a thumbnail version of it. the size of the thumbnail will not be same as the given size. the thumbnail() estimates a suitable thumbnail size to preserve the aspect of the image. we need to call another method draft() method, configuring the file reader and, finally, resizing the image. let's see the following syntax. syntax - 
image.thumbnail(size, resample=3)
 the above syntax - size - it is the defined size of a thumbnail. resample - it is an optional resampling filter. this filter can be one of these image.nearest, bilnear, pil.image.bicubic, or pil.image.lanczos. by default, it is pil.image.bicubic. return - it returns none. let's understand the following example. example - 
from pil import image
def thumbs():
   try:
      img = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
      img.thumbnail((80,80))
      img.save('images/thumbnail.jpg')
      image1 = image.open('images/thumbnail.jpg')
      image1.show()
   except ioerror:
      pass
thumb()
 output: explanation - in the above code, we have defined the thumbs() function that contains the try-expect to handle any occurrence. in the try block, we have opened an image which we want to modify as thumbnail. then, we have called the thumbnail() function to the image object and we have passed the thumbnail size. somehow, if the try block would through an error, it will jump to except block where we defined the ioerror exception. merging images using pillow we can paste an image onto another one. pillow library provides merge() function which takes a mode and tuple of the images parameters. then, it associates them with a single image. let's see the following syntax. syntax - 
image.merge(mode, bands)
 in the above syntax - mode - it is used for the output image. bands - it is an order that contains one single-band image for each band in the output. return value - it returns an image object. let's understand the following example. example - 
from pil import image
image = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
r, g, b = image.split()
image.show()
image = image.merge("rgb", (b, g, r))
image.show()
 output: when we execute the above code, we can observe the difference between original image and the image with merge the rgb bands. merging two images merging two images is the same as above. first, it requires to create an image object for the essential image using the open() function. one point should be remembered by developer; both images must be the same size before merging them. then we create empty images using the image.new() function, we paste the images using the paste() function. after that, we save and display the resultant image using the save() and show() functions. let's understand the following example. example - 
from pil import image
#read the two images
image1 = image.open(r"c:\users\devansh sharma\downloads\car.jpg")

# # image1.show()
image2 = image.open(r"c:\users\devansh sharma\downloads\staus.jpg")

image2.show()
#we must resize, first image before merging them 
image1 = image1.resize((266, 190))
image1_size = image1.size
image2_size = image2.size
new_image = image.new('rgb',(2*image1_size[0], image1_size[1]), (250,250,250))
new_image.paste(image1,(0,0))
new_image.paste(image2,(image1_size[0],0))

new_image.show()
 output: explanation - in the above code, we have imported the image module from the pil library. we opened two images to merge them with each other. before perform the merge operation, we need to make sure both images should be the same size. we made the size of the first image as the second image. then, we used the paste() method to merge them. blur an image using pillow blurring an image is a method of decreasing the level of noise in the image by applying a filter to an image. it is the most important aspect of image processing. the pillow library offers the imagefilter class that contains several standard image filters. in this section, we will discuss various techniques of blurring images. these techniques are mentioned below. simple blur box blur gaussian blur the image.filter() method will use the techniques mentioned above to apply the filters' images. simple blur in the simple blur, the blurring effect is applied to the image as specified through a specific kernel. let's see the following syntax. syntax - 
filter(imagefilter.blur)
 let's understand the following example. example - 
from pil import image, imagefilter
#open image
original_image = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
original_image.show()

# applying simple blur function
blur_image = oriimage.filter(imagefilter.blur)
blur_image.show()
 output: original image - blurred image - we have opened two standard images to perform blur operation. we can see the difference between the original image and the blurred image. box blur the box blur filter uses the 'radius' as a parameter. it is directly proportional to the blur value. syntax - 
imagefilter.boxblur(radius)
 in the above syntax - radius - it represents the box in one direction. radius 0 - it means no blur operation perform and returns the same image. rradius 1 & minnus - it takes total of 9 pixels, one pixels in each direction. let's understand the following example. example - original image - box blurred image - gaussian blur this filter works the same as box blur but slight changes in its algorithm. it also takes the radius parameter. we can generate a different intensity of gaussianblur image by changing the radius value. syntax - 
imagefilter.gaussianblur(radius=2)
 let's understand the following example. example - 
#import image and imagefiler module 
from pil import image, imagefilter

#open image
original_image = image.open(r"c:\users\devansh sharma\downloads\car.jpg")
original_image.show()

# applying gaussina blur function
blur_image = original_image.filter(imagefilter.gaussianblur(6))
blur_image.show()
 output: original image - gaussian blurred image - creating a watermark using pillow we all may see a tiny text on the bottom of the online photos which is called watermark. it is an excellent way to protect images and prevent their misuse. watermark does not only protect from misuse but also provide the copyright to our creative photos. so, it is preferred to add a watermark to the image, before sharing to the social media. it is kind of text or logo overlaid on the photo that have a small identity of the owner or who owns the rights to the photo. with the python pillow library, we can add the watermark to the image very easily. this library provides the image, imagedraw and imagefont module. let's understand the following example. example - 
#import all three modules from image library
from pil import image, imagedraw, imagefont

#creating an image object 
img = image.open(r'c:\users\devansh sharma\downloads\car.jpg')
width, height = img.size

draw_1 = imagedraw.draw(img)
# passing sample watermark text
text_1 = "javatpoint.com"


# specifyig the font familiy and font size
font = imagefont.truetype('arial.ttf', 36)
textwidth, textheight = draw.textsize(text_1, font)

# calculate the x,y coordinates of the text
margin = 10
x = width - textwidth - margin
y = height - textheight - margin

# draw watermark in the bottom right corner
draw_1.text((x, y), text, font=font)
im.show()
 explanation - in the above code, we have imported the image, imagedraw and imagefont modules from the pillow library where the imagedraw module enhances the functionality to draw 2d graphics to the image. the imagefont module is responsible for adding font functionality while writing watermark. we created an image object where we will apply the watermark. the image object passed to the draw() method; we wrote the watermark and saved it to the text variable. we can also set the font-family and font-size as we have set 'times new roman' and font-size 25. then, we calculated the x, y coordinate to specify the text position in the image. once we calculated the coordinate, we drew the watermark in the bottom right corner. apply color to the image pillow library provides the imagecolor module that contains colors in the several formats. it also has the converter from css3-style color specifiers to rgb tuples. let's have a look at the color names which are supported by the imagecolor module. the first format is hexadecimal color specifiers, specified as #rgb or #rrggbb. for example, #00ff00 denotes pure green. the second format is #00ff00 hex color, red value is 0 (0% red), green value is 255(100% green) and the blue value of its rgb is 0 (0% blue). there are 140 standard color names in the imagecolor module. most of the colors are supported by the window system and most web browsers. imagecolor.getrgb() method this method is used to convert a color string to an rgb tuple and it raises a valueerror exception in case of string cannot be parsed. let's see the following syntax. syntax - 
pil.imagecolor.getrgb(color)
 in the above syntax - color - it is a color string. return value - it returns rgb (red, green, blue [,alpha]). let's understand the following example. example - 
# importig imagecolor module
from pil import imagecolor

# using getrgb method
img = imagecolor.getrgb("blue")
print(img)

image_1 = imagecolor.getrgb("red")
print(image_1)
 output: (0, 0, 255)
(255, 0, 0)
 as we can see in the above code, the getrgb() method taken the color name and returned the rgb values. example - 2 
#import necessary image modules
from pil import image,imagecolor

# create new image & get color rgb tuple.
img = image.new("rgb", (256, 256), imagecolor.getrgb("#add8e6"))

#show image
img.show()
 imagedraw module the imagedraw module is a very important component of the pillow library. we can provide some simple 2d graphics support for image object. this module helps create new images, provides some additional touches to the image, and creates some graphics. it also supports the annotation of text and drawing of shapes. imagedraw module uses the origin of the two-dimension co-ordinate which is in the upper left corner of the image. it supports the various fonts for the text annotations such as bitmap, opentype, or truetype. let's understand the following example. example - 
from pil import image, imagedraw, imagefont

# get an image
img = image.open('c:').convert('rgba')

# making a blank image for the text, initialized to transparent text color
text1 = image.new('rgba', img.size, (255,255,255,0))

# getting a font from the saved library
fnt = imagefont.truetype('e:/pythonpillow/fonts/pacifico.ttf', 40)


d = imagedraw.draw(text1)

# draw text with the half opacity
d.text((14,14), "tutorials", font=fnt, fill=(255,255,255,128))

# draw text with the  full opacity
d.text((14,60), "point", font=fnt, fill=(255,255,255,255))
out = image.alpha_composite(img, text1)

out.show()
 output: image sequence in pillow image sequence is equivalent to the animation formats support by the python pil library. fli/flc, gif and some new formats are the maintained by sequence formats. tiff files can contain more than one frame as well. pil uploads the image in the sequence like first frame is loads according to the image sequence. we can use seek() and tell() methods to move the different frames. let's understand the following example. example - 
from pil import image
img = image.open(r'c:\users\devansh sharma\downloads\car.jpg')
#here are skipping to the second frame
img.seek(1)
try:
   while 1:
      img.seek(img.tell() + 1)
      
except eoferror:
   #end of sequence
   pass
 output: raise eoferror
eoferror
 explanation - in the above code, we can see that the eoferror exception is thrown when the sequence ends. to overcome that situation, we can create a sequence iterator class. a sequence iterator class 
class imagesequence:
   def __init__(self, img1):
      self.img1 = img1
   def __getitem__(self, xi):
      try:
         if xi:
            self.img1.seek(xi)
         return self.img1
      except eoferror:
         raise indexerror # end of sequence
for frame in imagesequence(img):
 writing text on the image using pillow this is different from the creating a watermark. we can write text to the image by passing the location where we want to write text on the image. we can pass the multiple parameters to text method. let's understand the following example. example - 
from pil import image, imagedraw
#creating an image object 
img = image.open(r'c:\users\devansh sharma\downloads\car.jpg')
d1 = imagedraw.draw(img)
d1.text((32, 44), "hello, javatpoint!", fill=(255, 255, 0))
img.show()
 output: flip and rotate image using pillow sometimes, we need to perform a few basic operations such as rotating and flipping the image. these operations are helpful to get the insight form the existing image, it also enhance the visibility of the image. pillow library allows us to flip and rotate an image very easily. we will use the transpose (method) function from the image module to perform the flip operation. some of the most common methods are given below. flip_left_right - it is used for flipping the image horizontally. flip_top_bottom - it is used to flipping the image vertically. rotate_90 - it is used to rotate the image by specifying degree. let's understand the example how to flip an image horizontally. example - 
# import  image module
from pil import image

# open an already existing image and create image object
imageobject = image.open(r'c:\users\devansh sharma\downloads\car.jpg')

# perform a flip of left and right
hori_flippedimage = imageobject.transpose(image.flip_left_right)

# display the original image
imageobject.show()

# display the horizontal flipped image
hori_flippedimage.show()
 output: original image flipped image - explanation - in the above code, we have read the image and flipped it horizontally. both images original and flipped displayed image using standard jpg display utility. example - 2 vertically flipped image 
# import  image module
from pil import image

# open an already existing image and create image object
imageobject = image.open(r'c:\users\devansh sharma\downloads\car.jpg')

# perform a flip of left and right
hori_flippedimage = imageobject.transpose(image.flip_left_right)

# display the original image
imageobject.show()

# display the horizontal flipped image
hori_flippedimage.show()
 output: original image - flipped image - let's understand another example of rotation example - 3 
# import  image module
from pil import image

# open an already existing image and create image object
imageobject = image.open(r'c:\users\devansh sharma\downloads\car.jpg')

# perform a flip of left and right
horizonflippedimage = imageobject.transpose(image.flip_left_right)
imageobject.show()

horizonflippedimage.show()
 output: original image - rotated image - for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.