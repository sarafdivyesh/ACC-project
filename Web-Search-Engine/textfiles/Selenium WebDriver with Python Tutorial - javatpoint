selenium webdriver with python tutorial - javatpoint ? scroll to top home selenium python selenium software testing appium jmeter junit postman jira testng soapui uipath rpa qa interview q selenium with python selenium python tutorial selenium with python tutorial in this tutorial, we will learn how to run a selenium test script using python programming language. before going further in this tutorial, first, we will understand some essential points which will help us to implement test scripts in python. what is selenium? why we use selenium for automation testing? what is python? why is python useful for automation testing? selenium with python configure selenium using python configure pydev in eclipse what is selenium? selenium is an open-source testing tool, which means it can be downloaded from the internet without spending anything. selenium is a functional testing tool and also compatible with non-functional testing tools as well. for further information about selenium, refer the below link: https://www.javatpoint.com/selenium-tutorial why we use selenium for automation testing? selenium is one of the most popular automation testing tools. here automation testing is a process of converting any manual test case into the test scripts using automation tools such as selenium. following are some aspects that, why we prefer selenium for automation testing: the selenium test scripts can be written in any programming languages like java, python, c#, ruby, perl, as so on. the selenium test scripts can be executed in many operating system platforms such as windows, mac, linux, etc. and the test scripts can be implemented on different browsers like google chrome, mozilla firefox, internet explorer, safari, etc. the selenium testing tool can be associated with other testing tools such as testng, junit for managing the test cases, and generating test reports. to achieve continuous testing, selenium is integrated with maven, jenkins, and docker testing tools. what is python? python supports the object-oriented programming approach to establish the applications. it is simple and easy to learn and provides lots of high-level data structures. it is an open-source language. it is a high-level and interpreter scripting programing language. python makes the development and debugging fastbecause there is no compilation step included in python development. for further details about python language, refer the below link: https://www.javatpoint.com/python-tutorial why is python useful for automation testing? python is very useful for automation testing because it supports multiple programming patterns. python has many built-in testing frameworks such as pytest and robot, which covers the debugging and faster workflow. it is an interpreted language means the interpreter implements the code line by line at a time that's makes debugging easy. python is cross-platform language; that's why it can run on different platforms like windows, linux, unix, and macintosh, python can be easily implemented with other programming languages such as c, c++, java, etc. selenium with python there are two ways to run a selenium test scripts with the help of python: configure selenium using python configure pydev in eclipse. let us see how we configure selenium with the help of python programing language: configure selenium using python there are following steps to configure selenium using python: download and install python on windows install selenium libraries in python download and install pycharm create a new project and write the selenium test script run and validate the test scripts. download and install python for windows in this section, we will see how we download and install the python for windows platform. download the python to download the latest version of python for windows platforms, refer the below link: https://www.python.org/downloads/ once we clicked on the above link, the latest release version list is shown, where we clicked on the python 3.8.1 version as we can see in the below screenshot: the python-3.8.1 version window will appear on the screen, then scroll the page little-bit and find the file section, and the click on the windows x86-64 web-based installer link for the windows operating system as we can see in the below screenshot: install the python after downloading the python for windows-64 bit, we will be ready to install the python. to install the python, follow the below process: once we double-click on the downloaded executable file, the python 3.8.1(64-bit) setup window will appear on the screen, where we have two options available to install the python, which are: install now customize installation we will click on the customize installation, and select add python 3.8 to path checkbox as we can see in the below image: after, click on the customize installation, the optional features will appear on the screen, where we can select and deselect the features according to our requirements. then, click on the next button, to proceed further as we can see in the below image: once, we clicked on the next button; we have a list of advanced options available, where we can select the options based on our needs and also make sure that the install for all users is selected. we can also customize the install location according to our convenience by clicking on the browse after that, click on the install button, to install the python as we can see in the below screenshot: the installing process is getting started after clicking on the install button as we can see in the below screenshot: when the installation is done, we got the confirmation message as setup was successful, which means that the python is installed successfully for the windows operating system. then, click on the close button, to close the setup window as we can observe in the below screenshot: after that, we will check whether python is installed successfully and working fine or not. so for this, we will open our command prompt, and type the command as python and press the enter key, and it will open the python interpreter shell where we can implement the python program as we can see in the below image: installing the selenium libraries in python once we successfully install the python in our operation system, we will install the selenium libraries. for this, we will execute the following command in our command prompt: 
python -m pip install -u selenium
 and, this command will successfully install the latest selenium package i.e., selenium -3.141.0 added to the libraries as we can see in the below image: after that executing the above command, it will create the selenium folder automatically having all the selenium libraries as we can see in the below screenshot: download and install pycharm once we successfully install the selenium libraries into python, we are ready to download python ide that is pycharm. to download the pycharm, follow the below process: refer the below link, to download the pycharm https://www.jetbrains.com/pycharm/download/#section=windows once we clicked on the above link, we will get the below window, where will click on the download button under the community section for the windows after that, double-click on the executable file to install the pycharm, and the pycharm community edition setup window will appear on the screen, where we click on the next button to proceed further as we can see in the below image: in the next step, we can choose install location by clicking on the browser button, then click on the next button for further process. in the next step, we have some installation options available, and we can select them based on our requirements. after that, click on the next button as we can see in the below image: then, click on the install button to install the pycharm, as we can see in the below screenshot: as we can see in the below image, the installation process is getting started. then, click on the finish button to finish the installation process as we can see in the below image: create a new project and write the selenium test script once we successfully install the pycharm, we will open the pycharm ide for creating a new project. create a new project in pycharm follow the below process, to create a new project in pycharm: first, open the pycharm by double-click on it, and click on the create new project as we can see in the below image: after that, we will provide the project name as seleniumtest, and click on the create button as we can see in the below image: after clicking on the create button, we will get the below window: adding selenium test scripts for adding the selenium test scripts in the pycharm, follow the below process: right-click on the seleniumtest project, then go to new, and we can add any of the options in the given list according to our requirements. but, here we are adding the python file, so for this, we will add the directory which helps us to manage them separately as we can see in the below screenshot: and, provide the directory name, in our case we give it as demo after that, press the enter key as we can see in the below screenshot: after creating a directory, we will right-click on the demo directory then go to new, and select python file from the pop-up menu as we can see in the below image: demo ? new ? python file and, we provide a name to python file as sample1. then, press the enter key as we can see in the below image: after that, we got the ide where we can create or write our selenium test scripts. write the selenium test script for our testing purpose, we will first go to the google home page and search javatpoint from there. we are creating our sample test script step by step to give you a complete understanding of how we write a selenium test script in python programming language. for this, follow the below steps: steps actions input expected result 1. import webdriver from selenium. the webdriver should be imported. 2. open the google chrome browser. the google chrome browser should be opened. 3. maximize the browser window. the browser window should be maximized. 4. navigate to the google home page. https://www.google.com/ the google home page must be displayed. 5. identify the google search text box and pass the value. javatpoint the value should be entered in the search text box. 6. click on the google search button. the google search button should be clicked. 7. close the browser. the browser should be closed. step1 in the first step, we will type the following statement to import the web driver: 
from selenium import webdriver
 step2 after that, we will open the google chrome browser. as we can see in the below screenshot, we have multiple types of browsers options available, and we can select any browser from the list like chrome, edge, firefox, internet explorer, opera, safari, etc. following are the sample code for opening the google chrome browser: 
driver = webdriver.chrome()
 step3 in the next step, we will be maximizing our browser window size, and the sample code is as below: 
driver.maximize_window()
 step4 then, we will navigate to the given url. the sample code is as below: 
driver.get("https://www.google.com/")
 note: as we know that python is a very easy language to write code because we don't have to write multiple statements like as we did it java. or if we want to comment out something, we just simply put a hash[#] in our statements, or we can directly press ctrl+ forward slash [/] from our keyboard. step5 in this step, we are trying to locate the google search text box with the help of its name attribute value. right-click on the google search text box, and select the inspect option in the pop-up menu as we can see in the below image: the developer tool window will be launched with all the specific codes used in the development of the google search text box. and, copy the value of its name attribute, that is "q" as we can see in the below image: here the sample code: 
driver.find_element_by_name("q").send_keys("javatpoint")
 step6 once we identify the google search text box, and we will identify the google search button. so for this, follow the below process: right-click on the google searchbutton, and select the inspect option from the given pop-up menu as we can see in the below image: the developer tool window will be launched with having all the specific codes used in the development of the google search button. then, copy the value of its name attribute that is "btnk" as we can see in the below image: and, the sample code is as following: 
driver.find_element_by_name("btnk").send_keys(keys.enter)
 step7 in the last step, we are closing the browser. and, the sample code for closing the browser is as follows: 
driver.close()
 our final test script will look like this, after completing all the above steps: 
from selenium import webdriver
import time
from selenium.webdriver.common.keys import keys
print("sample test case started")
driver = webdriver.chrome()
#driver=webdriver.firefox()
#driver=webdriver.ie()
#maximize the window size
driver.maximize_window()
#navigate to the url
driver.get("https://www.google.com/")
#identify the google search text box and enter the value
driver.find_element_by_name("q").send_keys("javatpoint")
time.sleep(3)
#click on the google search button
driver.find_element_by_name("btnk").send_keys(keys.enter)
time.sleep(3)
#close the browser
driver.close()
print("sample test case successfully completed")
 note: import time: time is a python module, which is used to handle the time-related tasks such as time.sleep(). from selenium.webdriver.common.keys import keys: here, we are adding keys libraries from selenium, like in the above code, we are using the enter key instead of click() method to perform a particular scenario. run and validate the test scripts once we are done with writing the selenium test script, we will run our test scripts. here we will run our test scripts in two ways: run in python ide run in command prompt run in python ide so, for this first, we will see how to run the selenium test script in python ide. right-click on the code, and select run 'sample1' from the popup menu as we can see in the below screenshot: when we run this script it will give an exception because we don't have the chrome driver executable file as we can in the below image: to overcome this exception, we will download the chrome driver executable from below link: https://chromedriver.storage.googleapis.com/index.html?path=79.0.3945.36/ once we click on the above link, we will click on the zip file based upon our operating system platform. like we have windows platform that's why we clicked on thezip to download the executable file as we can see in the below screenshot: after downloading the exe file, we can paste this file to the python folder and unzip it. then, we will create one more folder called libraries as browsers in the python ide. right-click on the project(seleniumtest) ? new ? directory as we can see in the below screenshot: and, we will add all the driver's executable files in the browsers folder manually. for this, we will copy the chrome driver exe file from the python folder, and paste in the browser folder as we can see in the below image: now go to pycharm ide, and copy the absolute path of chromdriver.exe file as we can see in the below screenshot: replace the statement "driver = webdriver.chrome()" with a statement given below: 
driver=webdriver.chrome(r"c:\users\jtp\pycharmprojects\seleniumtest\browsers\chromedriver.exe")
 note: here, we will use "r" to overcome the unicode error. as we can see in the below screenshot, if we do not put r in the code, it will generate the syntax error. after that, we will run the sample1 once again, and it will execute the code successfully as we can see in the below image: the above test script will launch the google chrome browser and automate all the test scenarios. run in command prompt to run the above test script in the command prompt, follow the below process: copy the location of the sample1.py file as we can see in the below image: and paste in the command prompt, first go to the particular folder then enter the below command: python sample1.py then, press the enter key as we can see in the below screenshot that the sample test case stared. and after automating all the scenarios, it will show the message as a sample test case successfully completed. configure pydev in eclipse this is another way to execute the selenium test script using python. in this section, we will install pydev in eclipse, then implement the selenium test scripts on it. install pydev execute the selenium test scripts using python. install pydev to install the pydev in eclipse, follow the below process: pydev installation set the preference create a new project create a new package create a pydev module pydev installation before start installing pydev in eclipse, make sure that we already installed the latest version of eclipse ide. double-click on the eclipse ide software. then, go to help in the toolbar and select eclipse marketplace option in the given pop-up menu as we can see in the below screenshot: eclipse marketplace window will open, and in the search area, we will type pydev and press the enter then, click on the install button as we can see in the below screenshot: once we clicked on the install button; it will start the installation process and then click on the confirm button for further process as we can see in the below process: then, select i accept the terms of the license agreements option and click on the finish button to finish the installation process as we can observe in the below image: once the installation is done, restart your eclipse ide as we can see in the below image: after that, we will set the preference to use the python project based on our requirements. set the preference to set the preference, follow the below process: go to the window option in the eclipse ide toolbar, then select the preference option in the given list as we can see in the below image: the preference window will open where we will expand the pydev then again expand the interpreters and select the python interpreter from the given list. click on the browse for python/pypy.exe option as we can observe in the below image: pydev ? interpreters ? python interpreter once we click on the browse for python/pypy.exe, we will provide the interpreter name and executable file path of python. for this, in the select interpreter pop-up window, click on the browse button, and browse the executable file path of python in our local system, and click on the ok button as we can see in the below image: after that, click on the select all button, then click on ok button to select the folders as we can see in the below screenshot: then, click on the apply and close button, to complete the setting preference process as we can see in the below screenshot: after setting the preference successfully, we will create a new project in python. create a new project to create a new project, follow the below steps: go to the file menu then go to new and select other option in the popup menu as we can see in the below image: file ? new ? other once the other option is selected, [new] window will open where we will expand pydev and choose pydev project, and click on the next button as we can see in the below image: once we clicked on the next button; we will provide the project name and click on the finish button as we can observe in the below image: the python project is created in the eclipse as we can see in the below image: when we are done with creating a python project, we will create a new python package. create a new package follow the below process, to create a new package: right-click on the newly created project(seleniumtest), go to new, then select pydev package in the given popup menu as we can see in the below image: then provide the name of the pydev package, and click on the finish button as we can see in the below image: as we can see in the below screenshot that the new package is created. after creating a pydev package, we will create a pydev module. create a pydev module to create a pydev module, follow the below process: right-click on the newly created package[demo], then go to new and select pydev module from the given list as we can see in the below screenshot: demo ? new ? pydev module then give the pydev module name [test], and click on the finish button as we can observe in the below screenshot: after that, we will select the empty template from the given list, and click on the ok button as we can see in the below image: once we have done with creating a python model, we are ready to write and execute our selenium test scripts. write and execute the selenium test script write the selenium test script for our testing purpose, we will perform a login test on the gmail application. in this test, we will automate the below test scenarios: steps actions input expected result 1. import web driver from selenium. web driver should be imported. 2. open the google chrome browser. the google chrome browser should be opened. 3. maximize the browser and delete all the cookies the browser should be maximized, and cookies should be deleted. 4. navigate to the home page gmail application. https://www.gmail.com the gmail home page must be displayed. 5. identify the username text box and pass the value. [email protected]m the username text box should be identified and value should be entered in the username text box. 6. click on the next button. the next button should be clicked. 7. identify the password text box and pass the value. ####### the password text box should be identified and value should be entered in the password text box. 8. click on the next button. the next button should be clicked. 9. close the browser. the browser should be closed. follow the below steps: step1 in the first step, we will import the web driver with the help of the following statement: 
from selenium import webdriver
 step2 after that, we will open the google chrome browser. to launch the google chrome or any other browser (firefox, ie, etc.), we need to download the executable files of the chrome driver from the given link: https://sites.google.com/a/chromium.org/chromedriver/downloads then, paste the downloading exe file in the python package (demo) to overcome the exceptions as we can see in the below screenshot: the sample code is as below: 
#open google chrome browser
driver = webdriver.chrome()
 step3 in the next step, we maximize and delete all the cookies of the browser window. here the sample code: 
#maximize the window size
driver.maximize_window()
#delete the cookies
driver.delete_all_cookies()
 step4 in this step, we will navigate to the gmail application url. the sample code is as below: 
#navigate to the url
driver.get("https://www.gmail.com")
 step5 once we navigate to the url of the gmail application, we will identify the username text box and passing the value of it. to identify the username text box, follow the below process: right-click on the username text box. and select the inspect option in the given pop-up menu as we can see in the below screenshot: the developer tool window will open with all the specific codes used in the development of the usernametext box. then, copy the value of its id attribute that is: identifierid as we can see in the below image: and, here the sample code: 
#identify the user name text box and enter the value
driver.find_element_by_id("identifierid").send_keys("xyz11@gmail.com")
time.sleep(2)
 step6 in this step, we will identify the next button and click on it. to identify the next button, follow the below process: right-click on the next button, and click on the inspect option in the given pop-up menu as we can see in the below image: the developer tool window will open with all the specific codes used in the development of the next and, copy the value of its absolute xpath that is: //span[@class='rvejvd snbyac'] from the chropath section as we can see in the below image: here the sample code: 
#click on the next button
driver.find_element_by_xpath("//span[@class='rvejvd snbyac'][1]").click()
time.sleep(3)
 step7 in this step, we will identify the password text box and pass the value of it. to identify the password textbox, follow the below process: right-click on the password text box, and click on the inspect option from the given pop-up menu as we can see in the below screenshot: the developer tool window will open with all the specific codes used in the development of the password text box. and, copy the value of name attribute, i.e., password as we can see in the below image: here the sample code: 
#identify the password text box and enter the value 
driver.find_element_by_name("password").send_keys("########")
time.sleep(3)
 step8 in this step, we will identify the next button and click on it. to identify the next button, follow the below process: right-click on the next button, and click on the inspect option in the given pop-up menu as we can see in the below image: the developer tool window will open with all the specific codes used in the development of the next copy the value of its absolute xpath that is: //span[contains(text(),'next')] from the chropath section as we can see in the below image: here the sample code: 
#click on the next button
driver.find_element_by_xpath("//span[contains(text(),'next')][1]").click()
time.sleep(3)
 step9 in the last step of the test script, we will close the browser. here the sample code: 
#close the browser
driver.close()
 and, our final test script will look like this after writing all the above steps successfully. 
from selenium import webdriver
import time
from selenium.webdriver.common.keys import keys
print("test case started")
#open google chrome browser
driver = webdriver.chrome()
#maximize the window size
driver.maximize_window()
#delete the cookies
driver.delete_all_cookies()
#navigate to the url
driver.get("https://www.gmail.com")
#identify the user name text box and enter the value
driver.find_element_by_id("identifierid").send_keys("xyz11@gmail.com")
time.sleep(2)
#click on the next button
driver.find_element_by_xpath("//span[@class='rvejvd snbyac'][1]").click()
time.sleep(3)
#identify the password text box and enter the value 
driver.find_element_by_name("password").send_keys("#########")
time.sleep(3)
#click on the next button
driver.find_element_by_xpath("//span[contains(text(),'next')][1]").click()
time.sleep(3)
#close the browser
driver.close()
print("gmail login has been successfully completed")
 note: in the above code, use your gmail id at place: [email protected] and password: ######### run the test script to run the above test script, we will right-click on the code and then select run as ? python run as we see in the below screenshot: the above test script will launch the google chrome browser and automate all the test scenarios. and, as we can see in the below screenshot that our code is running successfully as we get the print message (output) on the console screen. for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.